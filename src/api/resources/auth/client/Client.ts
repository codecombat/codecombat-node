/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CodecombatApi } from "@fern-api/codecombat";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CodecombatApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Logs a user in.
     */
    public async get(request: CodecombatApi.LoginUserRequest): Promise<void> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("provider", request.provider);
        if (request.accessToken != null) {
            _queryParams.append("accessToken", request.accessToken);
        }

        if (request.code != null) {
            _queryParams.append("code", request.code);
        }

        if (request.redirect != null) {
            _queryParams.append("redirect", request.redirect);
        }

        if (request.errorRedirect != null) {
            _queryParams.append("errorRedirect", request.errorRedirect);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                "/auth/login-o-auth"
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
