/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CodeCombatApi } from "@fern-api/codecombat";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CodeCombatApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Returns the playtime stats
     */
    public async getPlaytimeStats(
        request: CodeCombatApi.GetPlaytimeStatsRequest = {}
    ): Promise<CodeCombatApi.PlaytimeStatsResponse> {
        const { startDate, endDate, country } = request;
        const _queryParams = new URLSearchParams();
        if (startDate != null) {
            _queryParams.append("startDate", startDate);
        }

        if (endDate != null) {
            _queryParams.append("endDate", endDate);
        }

        if (country != null) {
            _queryParams.append("country", country);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodeCombatApiEnvironment.Production,
                "/playtime-stats"
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PlaytimeStatsResponse.parse(
                _response.body as serializers.PlaytimeStatsResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodeCombatApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodeCombatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodeCombatApiTimeoutError();
            case "unknown":
                throw new errors.CodeCombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns the license stats
     */
    public async getLicenseStats(): Promise<CodeCombatApi.LicenseStatsResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodeCombatApiEnvironment.Production,
                "/license-stats"
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.LicenseStatsResponse.parse(_response.body as serializers.LicenseStatsResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodeCombatApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodeCombatApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodeCombatApiTimeoutError();
            case "unknown":
                throw new errors.CodeCombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
