/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CodecombatApi } from "@fern-api/codecombat";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CodecombatApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Creates a `User`.
     */
    public async create(request: CodecombatApi.CreateUserRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.CodecombatApiEnvironment.Production, "/users"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.users.create.Request.json({
                name: request.name,
                email: request.email,
                role: request.role,
                preferredLanguage: request.preferredLanguage,
                heroConfig: request.heroConfig,
                birthday: request.birthday,
            }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a `User`.
     */
    public async get(handle: string, request: CodecombatApi.GetUserRequest): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.users.get.Response.parse(_response.body as serializers.users.get.Response.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Modify name of a `User`
     */
    public async modifyUser(
        handle: string,
        request: CodecombatApi.ModifyUserRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.modifyUser.Request.json({
                name: request.name,
                birthday: request.birthday,
            }),
        });
        if (_response.ok) {
            return await serializers.users.modifyUser.Response.parse(
                _response.body as serializers.users.modifyUser.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns a list of `Classrooms` this user is in (if a student) or owns (if a teacher).
     */
    public async getClassrooms(
        handle: string,
        request: CodecombatApi.GetUserClassroomsRequest
    ): Promise<CodecombatApi.ClassroomResponseWithCode[]> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/classrooms`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.users.getClassrooms.Response.parse(
                _response.body as serializers.users.getClassrooms.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Set the user's hero.
     */
    public async setHero(handle: string, request: CodecombatApi.SetHeroRequest): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/hero-config`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.setHero.Request.json({
                thangType: request.thangType,
            }),
        });
        if (_response.ok) {
            return await serializers.users.setHero.Response.parse(
                _response.body as serializers.users.setHero.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Set the user's aceConfig (the settings for the in-game Ace code editor), such as whether to enable autocomplete.
     */
    public async setAceConfig(
        handle: string,
        request: CodecombatApi.SetAceConfigRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/ace-config`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.setAceConfig.Request.json({
                liveCompletion: request.liveCompletion,
                behaviors: request.behaviors,
                language: request.language,
            }),
        });
        if (_response.ok) {
            return await serializers.users.setAceConfig.Response.parse(
                _response.body as serializers.users.setAceConfig.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Adds an OAuth2 identity to the user, so that they can be logged in with that identity. You need to send the OAuth code or the access token to this endpoint.
     * 1. If no access token is provided, it will use your OAuth2 token URL to exchange the given code for an access token.
     * 2. Then it will use the access token (given by you, or received from step 1) to look up the user on your service using the lookup URL, and expects a JSON object in response with an `id` property.
     * 3. It will then save that user `id` to the user in our db as a new OAuthIdentity.
     *
     */
    public async addOauth2Identity(
        handle: string,
        request: CodecombatApi.AddOauth2IdentityRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/o-auth-identities`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.addOauth2Identity.Request.json({
                provider: request.provider,
                accessToken: request.accessToken,
                code: request.code,
            }),
        });
        if (_response.ok) {
            return await serializers.users.addOauth2Identity.Response.parse(
                _response.body as serializers.users.addOauth2Identity.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Grants a user premium access to the "Home" version up to a certain time. ```
     *
     */
    public async grantPremiumAccess(
        handle: string,
        request: CodecombatApi.GrantUserPremiumAccessRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/subscription`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.grantPremiumAccess.Request.json(request.body),
        });
        if (_response.ok) {
            return await serializers.users.grantPremiumAccess.Response.parse(
                _response.body as serializers.users.grantPremiumAccess.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * If the user already has a premium access up to a certain time, this shortens/revokes his/her premium access.
     * If the ends is less than or equal to the current time, it revokes the subscription and sets the end date to be the current time, else it just shortens the subscription.
     *
     */
    public async shortenSubscription(
        handle: string,
        request: CodecombatApi.ShortenSubscriptionRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/shorten-subscription`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.shortenSubscription.Request.json(request.body),
        });
        if (_response.ok) {
            return await serializers.users.shortenSubscription.Response.parse(
                _response.body as serializers.users.shortenSubscription.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Grants a user access to the "Classroom" version up to a certain time.
     * Sets their role to "student".
     *
     */
    public async grantClassroomAccess(
        handle: string,
        request: CodecombatApi.GrantUserClassroomAccessRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/license`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.grantClassroomAccess.Request.json(request.body),
        });
        if (_response.ok) {
            return await serializers.users.grantClassroomAccess.Response.parse(
                _response.body as serializers.users.grantClassroomAccess.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * If the user already has access to the "Classroom" version up to a certain time, this shortens/revokes his/her access.
     * If the ends is less than or equal to the current time, it revokes the enrollment and sets the end date to be the current time, else it just shortens the enrollment.
     *
     */
    public async shortenLicense(
        handle: string,
        request: CodecombatApi.ShortenLicenseRequest
    ): Promise<CodecombatApi.UserResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("handle", request.handle);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/${handle}/shorten-license`
            ),
            method: "PUT",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
            body: await serializers.users.shortenLicense.Request.json(request.body),
        });
        if (_response.ok) {
            return await serializers.users.shortenLicense.Response.parse(
                _response.body as serializers.users.shortenLicense.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Redirects to `/{handle}` given a unique, identifying property
     */
    public async lookup(property: string, value: string, request: CodecombatApi.LookupUserRequest): Promise<void> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("property", request.property);
        _queryParams.append("value", request.value);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CodecombatApiEnvironment.Production,
                `/users/user-lookup/${property}/${value}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CodecombatApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CodecombatApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CodecombatApiTimeoutError();
            case "unknown":
                throw new errors.CodecombatApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
